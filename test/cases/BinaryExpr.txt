precedence { mult left, plus left }

top { expr }

expr {
  atom | binaryExpr
}

binaryExpr:bin.expr {
  expr !mult multOp expr |
  expr !plus addOp expr
}

atom { symbol | "(" expr ")" }

tokens {
  multOp:mult.op { "*" | "/" }
  addOp:add.op { "+" | "-" }
  symbol:sym.expr { "x" | "y" }
}

# Parenthesized

(x+y)/x

==> bin.expr(bin.expr(sym.expr,add.op,sym.expr),mult.op,sym.expr)

# Associativity

x+x+x+x

==> bin.expr(bin.expr(bin.expr(sym.expr,add.op,sym.expr),add.op,sym.expr),add.op,sym.expr)

# Precedence

x+x*x-x

==> bin.expr(bin.expr(sym.expr,add.op,bin.expr(sym.expr,mult.op,sym.expr)),add.op,sym.expr)

# Mixed precedence

x*x+y/y

==> bin.expr(bin.expr(sym.expr,mult.op,sym.expr),add.op,bin.expr(sym.expr,mult.op,sym.expr))

# Duplicate operator

x++y

==> bin.expr(bin.expr(sym.expr,add.op,⚠),add.op,sym.expr)

# Dropped character 

x%+y

==> bin.expr(sym.expr,⚠,add.op,sym.expr)

# Missing operator

xy

==> bin.expr(sym.expr,⚠,sym.expr)
