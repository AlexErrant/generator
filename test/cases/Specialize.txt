@top { (statement ";")+ }

statement {
  (kw<"let"> identifier "=" number):decl |
  (kw<"print"> number):print |
  (kw<"exit">):exit |
  (kwExt<"async"> number):async |
  identifier
}

kw<word> { @specialize<identifier, word> }

kwExt<word> { @extend<identifier, word> }

@skip { whitespace }

@tokens {
  whitespace { std.whitespace+ }
  identifier:id { std.asciiLetter+ }
  number:number { std.digit+ }
}

# Can use a contextual keyword as regular identifier

let async = 10;
exit;

==> decl(id, number), exit

# Can not use a non-contextual keyword as identifier

print 10;
let print 2;

==> print(number),decl(error),error,print(number)

# Use of extended token can be determined by next token

async 1;
async;

==> async(number), id
